namespace Minerals.AutoDomain
{
    [Generator]
    public sealed class DomainEventGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var generates = context.SyntaxProvider.ForAttributeWithMetadataName
            (
                "Minerals.AutoDomain.NewDomainEventAttribute",
                static (x, _) => x is MethodDeclarationSyntax,
                static (x, _) => new DomainEventObject(x) //TODO: Add support for multiple attributes
            );

            context.RegisterSourceOutput(generates, static (ctx, element) =>
            {
                ctx.AddSource($"{element.Name}.g.cs", GenerateRecord(element));
            });
        }

        private static SourceText GenerateRecord(DomainEventObject eventObj)
        {
            var builder = new CodeBuilder();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendNamespace(builder, eventObj);

            builder.AddAutoGeneratedAttributes(typeof(ClassDeclarationSyntax));
            AppendRecordHeader(builder, eventObj);

            var arguments = GetSplitedArguments(eventObj);
            AppendRecordArguments(builder, arguments);
            AppendRecordConstructorHeader(builder, eventObj, arguments);
            AppendRecordConstructorBody(builder, arguments);

            builder.CloseAllBlocks();
            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendNamespace(CodeBuilder builder, DomainEventObject eventObj)
        {
            if (eventObj.Namespace != string.Empty)
            {
                builder.WriteLine("namespace ")
                    .Write(eventObj.Namespace)
                    .Write(".Events")
                    .OpenBlock();
            }
        }

        private static void AppendRecordHeader(CodeBuilder builder, DomainEventObject eventObj)
        {
            builder.WriteLine("public sealed record ")
                .Write(eventObj.Name)
                .Write(" : global::Minerals.AutoDomain.IDomainEvent")
                .OpenBlock();
        }

        private static SplitArgument[] GetSplitedArguments(DomainEventObject eventObj)
        {
            int indexOffset = eventObj.IncludeParentId ? 1 : 0;
            SplitArgument[] args = new SplitArgument[eventObj.Arguments.Length + indexOffset];
            if (eventObj.IncludeParentId)
            {
                args[0] = GetParentIdSplitedArgument(eventObj);
            }
            for (int i = indexOffset; i < args.Length; i++)
            {
                var array = eventObj.Arguments[i - indexOffset].Split(' ');
                args[i] = new(array[0], array[1].ToPascalCase(), array[1].ToCamelCase());
            }
            return args;
        }

        private static SplitArgument GetParentIdSplitedArgument(DomainEventObject eventObj)
        {
            var parentEventId = $"{eventObj.ParentName}Id";
            return new(parentEventId, parentEventId.ToPascalCase(), parentEventId.ToCamelCase());
        }

        private static void AppendRecordArguments(CodeBuilder builder, SplitArgument[] arguments)
        {
            foreach (SplitArgument arg in arguments)
            {
                builder.WriteLine("public ")
                    .Write(arg.Type)
                    .Write(" ")
                    .Write(arg.PascalCaseName)
                    .Write(" { get; private set; }");
            }
        }

        private static void AppendRecordConstructorHeader(CodeBuilder builder, DomainEventObject eventObj, SplitArgument[] arguments)
        {
            builder.NewLine().WriteLine("public ").Write(eventObj.Name).Write("(");
            for (int i = 0; i < arguments.Length; i++)
            {
                builder.Write(arguments[i].Type)
                    .Write(" ")
                    .Write(arguments[i].CamelCaseName);

                if (i < arguments.Length - 1)
                {
                    builder.Write(", ");
                }
            }
            builder.Write(")").OpenBlock();
        }

        private static void AppendRecordConstructorBody(CodeBuilder builder, SplitArgument[] arguments)
        {
            for (int i = 0; i < arguments.Length; i++)
            {
                builder.WriteLine(arguments[i].PascalCaseName)
                    .Write(" = ")
                    .Write(arguments[i].CamelCaseName)
                    .Write(";");
            }
            builder.CloseBlock();
        }

        private sealed record SplitArgument(string Type, string PascalCaseName, string CamelCaseName);
    }
}