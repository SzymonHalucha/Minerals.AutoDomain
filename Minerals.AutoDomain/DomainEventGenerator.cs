namespace Minerals.AutoDomain
{
    [Generator]
    public sealed class DomainEventGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var generates = context.SyntaxProvider.ForAttributeWithMetadataName
            (
                "Minerals.AutoDomain.NewDomainEventAttribute",
                static (x, _) => x is MethodDeclarationSyntax,
                static (x, _) => new DomainEventObject(x)
            );

            context.RegisterSourceOutput(generates, static (ctx, element) =>
            {
                ctx.AddSource($"{element.Name}.g.cs", GenerateRecord(element));
            });
        }

        private static SourceText GenerateRecord(DomainEventObject eventObj)
        {
            var builder = new CodeBuilder();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendNamespace(builder, eventObj);

            builder.AddAutoGeneratedAttributes(typeof(ClassDeclarationSyntax));
            AppendRecordHeader(builder, eventObj);
            AppendParentId(builder, eventObj);
            AppendRecordArguments(builder, eventObj);
            AppendRecordConstructor(builder, eventObj);

            builder.CloseAllBlocks();
            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendNamespace(CodeBuilder builder, DomainEventObject eventObj)
        {
            if (eventObj.Namespace != string.Empty)
            {
                builder.WriteLine("namespace ")
                    .Write(eventObj.Namespace)
                    .Write(".Events")
                    .OpenBlock();
            }
        }

        private static void AppendRecordHeader(CodeBuilder builder, DomainEventObject eventObj)
        {
            builder.WriteLine("public sealed record ")
                .Write(eventObj.Name)
                .Write(" : global::Minerals.AutoDomain.IDomainEvent")
                .OpenBlock();
        }

        private static void AppendParentId(CodeBuilder builder, DomainEventObject eventObj)
        {
            builder.WriteLine("public ")
                .Write(eventObj.ParentName)
                .Write("Id ")
                .Write(eventObj.ParentName)
                .Write("Id ")
                .Write("{ get; init; }");
        }

        private static void AppendRecordArguments(CodeBuilder builder, DomainEventObject eventObj)
        {
            builder.WriteIteration(eventObj.Arguments, (builder1, item, next) =>
            {
                string[] array = item.Split(' ');
                builder1.WriteLine("public ")
                    .Write(array[0])
                    .Write(" ")
                    .Write(array[1].Substring(0, 1).ToUpperInvariant())
                    .Write(array[1].Substring(1, array[1].Length - 1))
                    .Write(" { get; init; }");
            });
        }

        //TODO: Implement this...
        private static void AppendRecordConstructor(CodeBuilder builder, DomainEventObject eventObj)
        {

        }
    }
}