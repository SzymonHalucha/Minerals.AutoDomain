namespace Minerals.AutoDomain
{
    [Generator]
    public sealed class DomainEventGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var generates = context.SyntaxProvider.ForAttributeWithMetadataName
            (
                "Minerals.AutoDomain.NewDomainEventAttribute",
                static (x, _) => x is MethodDeclarationSyntax,
                static (x, _) => new DomainEventObject(x)
            );

            context.RegisterSourceOutput(generates, static (ctx, element) =>
            {
                ctx.AddSource($"{element.Name}.g.cs", GenerateRecord(element));
            });
        }

        private static SourceText GenerateRecord(DomainEventObject eventObj)
        {
            var builder = new CodeBuilder();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendNamespace(builder, eventObj);

            builder.AddAutoGeneratedAttributes(typeof(ClassDeclarationSyntax));
            AppendRecordHeader(builder, eventObj);
            AppendParentId(builder, eventObj);

            var formatedArguments = GetFormatedArguments(eventObj);
            AppendRecordArguments(builder, formatedArguments);
            AppendRecordConstructorHeader(builder, eventObj, formatedArguments);
            AppendRecordConstructorBody(builder, eventObj, formatedArguments);

            builder.CloseAllBlocks();
            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendNamespace(CodeBuilder builder, DomainEventObject eventObj)
        {
            if (eventObj.Namespace != string.Empty)
            {
                builder.WriteLine("namespace ")
                    .Write(eventObj.Namespace)
                    .Write(".Events")
                    .OpenBlock();
            }
        }

        private static void AppendRecordHeader(CodeBuilder builder, DomainEventObject eventObj)
        {
            builder.WriteLine("public sealed record ")
                .Write(eventObj.Name)
                .Write(" : global::Minerals.AutoDomain.IDomainEvent")
                .OpenBlock();
        }

        private static void AppendParentId(CodeBuilder builder, DomainEventObject eventObj)
        {
            builder.WriteLine("public ")
                .Write(eventObj.ParentName)
                .Write("Id ")
                .Write(eventObj.ParentName)
                .Write("Id ")
                .Write("{ get; private set; }");
        }

        //TODO: Minimalize allocation...
        private static FormatedArgument[] GetFormatedArguments(DomainEventObject eventObj)
        {
            var arguments = new FormatedArgument[eventObj.Arguments.Length];
            for (int i = 0; i < eventObj.Arguments.Length; i++)
            {
                var array = eventObj.Arguments[i].Split(' ');
                var startIndex = array[1][0].Equals('_') ? 1 : 0;

                var firstChar = array[1].Substring(startIndex, 1).ToUpperInvariant();
                var withoutFirstChar = array[1].Substring(startIndex + 1, array[1].Length - startIndex - 1);

                var rawName = startIndex == 1 ? array[1].Substring(1, array[1].Length - 1) : array[1];
                var formatedName = $"{firstChar}{withoutFirstChar}";

                arguments[i] = new FormatedArgument(array[0], rawName, formatedName);
            }
            return arguments;
        }

        private static void AppendRecordArguments(CodeBuilder builder, FormatedArgument[] arguments)
        {
            foreach (var arg in arguments)
            {
                builder.WriteLine("public ")
                    .Write(arg.Type)
                    .Write(" ")
                    .Write(arg.FormatedName)
                    .Write(" { get; private set; }");
            }
        }

        private static void AppendRecordConstructorHeader(CodeBuilder builder, DomainEventObject eventObj, FormatedArgument[] arguments)
        {
            //TODO: Add parent id with camelCase

            builder.NewLine().WriteLine("public ").Write(eventObj.Name).Write("(");
            for (int i = 0; i < arguments.Length; i++)
            {
                builder.Write(arguments[i].Type)
                    .Write(" ")
                    .Write(arguments[i].RawName);

                if (i < arguments.Length - 1)
                {
                    builder.Write(", ");
                }
            }
            builder.Write(")").OpenBlock();
        }

        private static void AppendRecordConstructorBody(CodeBuilder builder, DomainEventObject eventObj, FormatedArgument[] arguments)
        {
            //TODO: Add parent id with camelCase

            foreach (var arg in arguments)
            {
                builder.WriteLine(arg.FormatedName)
                    .Write(" = ")
                    .Write(arg.RawName)
                    .Write(";");
            }
            builder.CloseBlock();
        }

        private sealed record FormatedArgument(string Type, string RawName, string FormatedName);
    }
}