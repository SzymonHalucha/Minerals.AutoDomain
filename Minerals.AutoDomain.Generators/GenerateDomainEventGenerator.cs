namespace Minerals.AutoDomain.Generators
{
    [Generator]
    public sealed class GenerateDomainEventGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var events = context.SyntaxProvider.ForAttributeWithMetadataName
            (
                "Minerals.AutoDomain.GenerateDomainEventAttribute",
                static (x, _) => CheckValidity(x),
                static (x, _) => new GenerateDomainEventObject(x)
            );

            events = events.Where(x => x.Arguments.Length > 0 || x.Attributes.Any(x => x.IncludeParentId));

            context.RegisterSourceOutput(events, static (ctx, element) =>
            {
                for (int i = 0; i < element.Attributes.Length; i++)
                {
                    ctx.AddSource($"{element.Attributes[i].Name}.g.cs", GenerateStruct(element, i));
                }
            });
        }

        private static bool CheckValidity(SyntaxNode node)
        {
            return node is TypeDeclarationSyntax
                or MethodDeclarationSyntax
                or ConstructorDeclarationSyntax
                or PropertyDeclarationSyntax;
        }

        private static SourceText GenerateStruct(GenerateDomainEventObject eventObj, int attributeIndex)
        {
            var builder = new CodeBuilder();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendNamespace(builder, eventObj);

            builder.AddAutoGeneratedAttributes(typeof(ClassDeclarationSyntax));
            AppendRecordHeader(builder, eventObj, attributeIndex);

            var arguments = GetSplitedArguments(eventObj, attributeIndex);
            AppendRecordArguments(builder, arguments);
            AppendRecordConstructorHeader(builder, eventObj, arguments, attributeIndex);
            AppendRecordConstructorBody(builder, arguments);

            if (arguments.Length > 0)
            {
                var pascalCases = arguments.Select(x => x.PascalCaseName);
                IEquatableGeneration.AppendEquals(builder, eventObj.Attributes[attributeIndex].Name, pascalCases);
                IEquatableGeneration.AppendOverrideEquals(builder, eventObj.Attributes[attributeIndex].Name, pascalCases);
                IEquatableGeneration.AppendOverrideGetHashCode(builder, pascalCases);
                IEquatableGeneration.AppendOverrideEqualOperator(builder, eventObj.Attributes[attributeIndex].Name, pascalCases, false);
                IEquatableGeneration.AppendOverrideNotEqualOperator(builder, eventObj.Attributes[attributeIndex].Name, pascalCases, false);
            }

            builder.CloseAllBlocks();
            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendNamespace(CodeBuilder builder, GenerateDomainEventObject eventObj)
        {
            if (eventObj.Namespace != string.Empty)
            {
                builder.WriteLine("namespace ")
                    .Write(eventObj.Namespace)
                    .Write(".Events")
                    .OpenBlock();
            }
        }

        private static void AppendRecordHeader(CodeBuilder builder, GenerateDomainEventObject eventObj, int attributeIndex)
        {
            builder.WriteLine("public readonly partial struct ")
                .Write(eventObj.Attributes[attributeIndex].Name)
                .Write(" : global::Minerals.AutoDomain.IDomainEvent, global::System.IEquatable<")
                .Write(eventObj.Attributes[attributeIndex].Name)
                .Write(">")
                .OpenBlock();
        }

        private static SplitArgumentObject[] GetSplitedArguments(GenerateDomainEventObject eventObj, int attributeIndex)
        {
            var indexOffset = eventObj.Attributes[attributeIndex].IncludeParentId ? 1 : 0;
            var args = new SplitArgumentObject[(eventObj.Arguments.Length / 2) + indexOffset];
            if (eventObj.Attributes[attributeIndex].IncludeParentId)
            {
                args[0] = GetParentIdSplitedArgument(eventObj);
            }
            for (int i = 0; i < args.Length - indexOffset; i++)
            {
                args[i + indexOffset] = new SplitArgumentObject
                (
                    eventObj.Arguments[i * 2],
                    eventObj.Arguments[i * 2 + 1].ToPascalCase(),
                    eventObj.Arguments[i * 2 + 1].ToCamelCase()
                );
            }
            return args;
        }

        private static SplitArgumentObject GetParentIdSplitedArgument(GenerateDomainEventObject eventObj)
        {
            var parentEventId = $"{eventObj.ParentName}Id";
            return new(parentEventId, parentEventId.ToPascalCase(), parentEventId.ToCamelCase());
        }

        private static void AppendRecordArguments(CodeBuilder builder, SplitArgumentObject[] arguments)
        {
            foreach (SplitArgumentObject arg in arguments)
            {
                builder.WriteLine("public ")
                    .Write(arg.Type)
                    .Write(" ")
                    .Write(arg.PascalCaseName)
                    .Write(" { get; }");
            }
        }

        private static void AppendRecordConstructorHeader(CodeBuilder builder, GenerateDomainEventObject eventObj, SplitArgumentObject[] arguments, int attributeIndex)
        {
            builder.NewLine().WriteLine("public ").Write(eventObj.Attributes[attributeIndex].Name).Write("(");
            for (int i = 0; i < arguments.Length; i++)
            {
                builder.Write(arguments[i].Type)
                    .Write(" ")
                    .Write(arguments[i].CamelCaseName);

                if (i < arguments.Length - 1)
                {
                    builder.Write(", ");
                }
            }
            builder.Write(")").OpenBlock();
        }

        private static void AppendRecordConstructorBody(CodeBuilder builder, SplitArgumentObject[] arguments)
        {
            for (int i = 0; i < arguments.Length; i++)
            {
                builder.WriteLine(arguments[i].PascalCaseName)
                    .Write(" = ")
                    .Write(arguments[i].CamelCaseName)
                    .Write(";");
            }
            builder.CloseBlock()
                .NewLine();
        }
    }
}