namespace Minerals.AutoDomain.Generators
{
    [Generator]
    public sealed class IServiceCollectionExtensionsGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var handlers = context.SyntaxProvider.CreateSyntaxProvider
            (
                static (x, _) => CheckForGenericInterfaces(x),
                static (x, _) => x.SemanticModel.GetDeclaredSymbol(x.Node)!
            );

            handlers = handlers.Where(HasValidInterface);
            var selected = handlers.Select(GetHandlerObject);
            var collected = selected.Collect();

            context.RegisterSourceOutput(collected, static (ctx, collectedTypeNames) =>
            {
                ctx.AddSource("IServiceCollectionExtensions.g.cs", GenerateStaticClass(collectedTypeNames));
            });
        }

        private static bool CheckForGenericInterfaces(SyntaxNode node)
        {
            return node is (not InterfaceDeclarationSyntax) and TypeDeclarationSyntax typeSyntax
                && typeSyntax.BaseList is not null
                && typeSyntax.BaseList.Types.Count > 0;
        }

        private static bool HasValidInterface(ISymbol symbol)
        {
            return ((ITypeSymbol)symbol).Interfaces.Any(x =>
            {
                return x.Name.Equals("IDomainEventHandler")
                    && x.ContainingNamespace.Name.Equals(nameof(AutoDomain))
                    && x.ContainingNamespace.ContainingNamespace.Name.Equals(nameof(Minerals));
            });
        }

        private static DomainEventHandlerObject GetHandlerObject(ISymbol symbol, CancellationToken cancellation)
        {
            return new DomainEventHandlerObject(symbol);
        }

        private static SourceText GenerateStaticClass(ImmutableArray<DomainEventHandlerObject> handlers)
        {
            var builder = new CodeBuilder();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendNamespace(builder);

            builder.AddAutoGeneratedAttributes(typeof(ClassDeclarationSyntax));
            AppendStaticClassHeader(builder);
            AppendAddDomainEventDispatcherMethod(builder, handlers);
            AppendDefaultInjectPolicyMethod(builder);

            builder.CloseAllBlocks();
            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendNamespace(CodeBuilder builder)
        {
            builder.WriteLine("namespace Minerals.AutoDomain")
                .OpenBlock()
                .WriteLine("using global::Microsoft.Extensions.DependencyInjection.Extensions;")
                .WriteLine("using global::Microsoft.Extensions.DependencyInjection;");
        }

        private static void AppendStaticClassHeader(CodeBuilder builder)
        {
            builder.WriteLine("public static class IServiceCollectionExtensions")
                .OpenBlock();
        }
        private static void AppendAddDomainEventDispatcherMethod(CodeBuilder builder, ImmutableArray<DomainEventHandlerObject> handlers)
        {
            builder.WriteLine("public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddDomainEventDispatcher")
                .Write("(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection collection, ")
                .Write("global::System.Action<global::Microsoft.Extensions.DependencyInjection.IServiceCollection, global::System.Type, global::System.Type> injectPolicy = null)")
                .OpenBlock();

            builder.WriteLine("collection.TryAddSingleton<global::Minerals.AutoDomain.IDomainEventDispatcher, global::Minerals.AutoDomain.DomainEventDispatcher>();")
                .WriteLine("if (injectPolicy is null)")
                .OpenBlock()
                .WriteLine("injectPolicy = DefaultInjectPolicy;")
                .CloseBlock();

            foreach (var handler in handlers)
            {
                builder.WriteLine("injectPolicy.Invoke(collection, typeof(global::Minerals.AutoDomain.IDomainEventHandler<")
                .Write(handler.EventTypeName)
                .Write(">), typeof(")
                .Write(handler.HandlerTypeName)
                .Write("));");
            }

            builder.WriteLine("return collection;")
                .CloseBlock()
                .NewLine();
        }

        private static void AppendDefaultInjectPolicyMethod(CodeBuilder builder)
        {
            builder.WriteLine("private static void DefaultInjectPolicy(global::Microsoft.Extensions.DependencyInjection.IServiceCollection collection, global::System.Type handlerInterfaceType, global::System.Type handlerType)")
                .OpenBlock()
                .WriteLine("collection.AddSingleton(handlerInterfaceType, handlerType);")
                .CloseBlock();
        }
    }
}