namespace Minerals.AutoDomain.Generators
{
    [Generator]
    public class DomainEventGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var events = context.SyntaxProvider.ForAttributeWithMetadataName
            (
                "Minerals.AutoDomain.DomainEventAttribute",
                static (x, _) => x is StructDeclarationSyntax,
                static (x, _) => new DomainEventObject(x)
            );

            events = events.Where(x => x.Arguments.Length > 0);

            context.RegisterSourceOutput(events, static (ctx, element) =>
            {
                ctx.AddSource($"{element.Name}.g.cs", GeneratePartialStruct(element));
            });
        }

        private static SourceText GeneratePartialStruct(DomainEventObject eventObj)
        {
            var builder = new CodeBuilder();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendNamespace(builder, eventObj);

            builder.AddAutoGeneratedAttributes(typeof(StructDeclarationSyntax));
            AppendStructHeader(builder, eventObj);

            IEquatableGeneration.AppendEquals(builder, eventObj.Name, eventObj.Arguments);
            IEquatableGeneration.AppendOverrideEquals(builder, eventObj.Name, eventObj.Arguments);
            IEquatableGeneration.AppendOverrideGetHashCode(builder, eventObj.Arguments);
            IEquatableGeneration.AppendOverrideEqualOperator(builder, eventObj.Name, eventObj.Arguments, false);
            IEquatableGeneration.AppendOverrideNotEqualOperator(builder, eventObj.Name, eventObj.Arguments, false);

            builder.CloseAllBlocks();
            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendNamespace(CodeBuilder builder, DomainEventObject eventObj)
        {
            if (eventObj.Namespace != string.Empty)
            {
                builder.WriteLine("namespace ")
                    .Write(eventObj.Namespace)
                    .OpenBlock();
            }
        }

        private static void AppendStructHeader(CodeBuilder builder, DomainEventObject eventObj)
        {
            builder.NewLine().WriteIteration(eventObj.Modifiers, (builder1, item, next) =>
            {
                builder1.Write(item)
                    .Write(" ");
            });

            builder.Write("struct ")
                .Write(eventObj.Name)
                .Write(" : global::Minerals.AutoDomain.IDomainEvent, global::System.IEquatable<")
                .Write(eventObj.Name)
                .Write(">")
                .OpenBlock();
        }
    }
}